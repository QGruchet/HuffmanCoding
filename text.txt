void Sommet::ecritureHeader(){
  //Si le fichier existe on le supprime cela evite d'ecrire deux fois dans un meme fichier
  if(std::ifstream("src/out/binary_tree.dot")){
    remove("src/out/binary_tree.dot");
    // std::cout << "Suppression de binary_tree.dot" << std::endl;
  }
  //On creer le fichier
  std::string const nomFichier("binary_tree.dot");
  std::ofstream flux(nomFichier.c_str(), std::ios_base::app);

  if(flux){
    flux << "digraph{" << std::endl;
  }
}

void Sommet::ecritureFichier(Sommet *node){
  std::string const nomFichier("binary_tree.dot");
  std::ofstream flux(nomFichier.c_str(), std::ios_base::app);

  if(flux){
    if(!node){
      return;
    }
    else{
      if(node->left){
        flux << node << "->" << std::endl;
      }
      else{
        flux << node << std::endl;
      }
      ecritureFichier(node->left);
      if(node->right){
        flux << node << "->" << std::endl;
      }
      else{
        flux << node << std::endl;
      }
      ecritureFichier(node->right);
    }
  }
  else{
    std::cout << "Error : opening file";
  }
}

void Sommet::ecritureEnder(){
  std::string const nomFichier("binary_tree.dot");
  std::ofstream flux(nomFichier.c_str(), std::ios_base::app);

  if(flux){
      flux << "}" << std::endl;
  }
}